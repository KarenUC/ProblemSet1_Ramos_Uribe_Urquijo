Base_var <- db_filtro %>% select(directorio, p6050, fex_c, ingtot, ocu, p6210s1,
p6210, maxEducLevel, p6426, age, sex, estrato1,
formal, informal, clase, oficio, sizeFirm, p7040)
skim(Base_var)
### --- Missing Values
# Sacar cantidad de NAs por variable
cantidad_na <- sapply(Base_var, function(x) sum(is.na(x)))
cantidad_na <- data.frame(cantidad_na)
porcentaje_na <- cantidad_na/nrow(Base_var)
# Porcentaje de observaciones faltantes.
p <- mean(porcentaje_na[,1])
print(paste0("En promedio el ", round(p*100, 2), "% de las entradas est?n vac?as"))
# Ordenamos de mayor a menor
porcentaje_na <- arrange(porcentaje_na, desc(cantidad_na))
# Convertimos el nombre de la fila en columna
porcentaje_na <- rownames_to_column(porcentaje_na, "variable")
### --- Imputar variables---###
#Identificar cuantos ingresos son <=0
ing_0 <- Base_var$ingtot==0
sum(ing_0)
##Crear promedio del ingreso
Base_var = Base_var %>%
group_by(directorio) %>%
mutate(mean_ingtot = mean(ingtot))
#Impute a ingresos totales iguales a 0 el promedio del ingreso del hogar
Base_var = Base_var %>%
mutate(ingtot = ifelse(ingtot==0,
yes = mean_ingtot,
no = ingtot))
#Validar que no queden 0 en ingreso despu?s de imputar
ing_0 <- Base_var$ingtot==0
sum(ing_0)
#Imputar restantes con la media total de la muestra
#Crear media total
mu<- mean(Base_var$ingtot)
#Imputar informaci?n para observaci?n sin miembros de hogar
Base_var = Base_var %>%
mutate(ingtot = ifelse(ingtot==0,
yes = mu,
no = ingtot))
#Nueva validacion
ing_0 <- Base_var$ingtot==0
sum(ing_0)
### --- Limpieza outliers --- ###
x<-Base_var$ingtot
lambda<-boxcox(x, objective.name = "Log-Likelihood", optimize = T)$lambda
#Transformamos la variable
Base_var$ingtot_boxcox<-boxcoxTransform(x, lambda)
hist_ingtot<-ggplot()+
geom_histogram(aes(x = Base_var$ingtot), fill = "darkgreen", alpha = 0.3)
hist_ingtot_boxcox<-ggplot()+
geom_histogram(aes(x = Base_var$ingtot_boxcox), fill = "darkblue", alpha = 0.3)
ggarrange(hist_ingtot, hist_ingtot_boxcox, nrow = 1, ncol = 2)
### --- Estadisticas Descriptivas --- ###
library(stargazer)
library(vtable)
st(Base_var)
stargazer(Base_var)
skim(Base_var)  %>%
yank("factor")
stargazer(Base_var)
stargazer(Base_var$p6050)
stargazer(p6050)
stargazer(Base_var)
stargazer(Base_var, type = text)
stargazer(Base_var, type = "text")
# Paula Ramos, Karen Uribe y Juan D. Urquijo
# update: 18-06-2022
###----------------- Project Set 1----------###
##### ---Limpiar Ambiente --- ###### gncbnnb
rm(list = ls())
##### ---Cargar Librer?as --- ######
require(pacman)
# usar la funci?n p_load de pacman para instalar/llamar las librer?as de la clase
p_load(rio) # Librer?a para importar datos
p_load(tidyverse) # Librer?a para limpiar datos
p_load(e1071) # Tiene la funci?n para calcular skewness
p_load(EnvStats) # Transformaci?n Box-Cox
p_load(tidymodels) # Modelos ML
p_load(ggplot2) # Librer?a para visualizar datos
p_load(scales) # Formato de los ejes en las gr?ficas
p_load(ggpubr) # Combinar gr?ficas
p_load(knitr) # Tablas dentro de Rmarkdown
p_load(kableExtra) # Tablas dentro de Rmarkdown
p_load(skimr, # summary data
caret, # Classification And REgression Training
rvest,
stringr,
dplyr,
RSelenium,
Rcpp)
library(tidyverse)
library(robotstxt)
### ---- 1.1 General Instructions --- ###
## 1. a) Data acquisition
geih <- data.frame()
for (i in 1:10){
i= 1
url <-paste0("https://ignaciomsarmiento.github.io/GEIH2018_sample/pages/geih_page_",i, ".html")
temp <- read_html(url) %>%
html_table()
geih <- rbind(geih, temp)
}
###validar restricciones en los datos con robots.txt
browseURL("https://ignaciomsarmiento.github.io/GEIH2018_sample/robots.txt")
#No existe robots.txt por tanto no hay restricciones para scrappear
### --- 2. a) Data Cleaning --- ###
# Importamos los datos de otra fuente para validar que sean los mismos y los asignamos a un objeto llamado db
x <- import("https://gitlab.com/Lectures-R/bd-meca-2022-summer/lecture-01/-/raw/main/data/GEIH_sample1.Rds")
# RTA: Se encuentra que son iguales
# Se toma la base que se hizo web scrapping
db <- geih
# Inspeccionamos base de datos
skim(db) %>% head()
db$depto
# Utilizando el diccionario, identificamos variables categoricas para volverlas a tipo factor
db <- db %>%
mutate_at(.vars = c(
"cclasnr11", "cclasnr2", "cclasnr3", "cclasnr4", "cclasnr5",
"cclasnr6", "cclasnr7", "cclasnr8", "clase", "college",
"cotPension", "cuentaPropia", "depto", "directorio", "dominio",
"dsi", "estrato1", "formal", "ina", "inac", "informal",
"maxEducLevel", "p6050", "microEmpresa", "ocu", "oficio",
"orden", "p6090", "p6100", "p6210", "p6210s1", "p6240", "p6510",
"p6510s2", "p6545", "p6545s2", "p6580", "p6580s2", "p6585s1",
"p6585s1a2", "p6585s2", "p6585s2a2", "p6585s4", "p6585s4a2",
"p6590", "p6610", "p6620", "p6630s1", "p6630s2", "p6630s3",
"p6630s4", "p6630s6", "p6920", "p7040", "p7050", "p7090",
"p7110", "p7120", "p7140s1", "p7140s2", "p7150", "p7160",
"p7310", "p7350", "p7422", "p7472", "p7495", "p7500s1",
"p7500s2", "p7500s3", "p7505", "p7510s1", "p7510s2",
"p7510s3", "p7510s5", "p7510s6", "p7510s7", "pea", "pet",
"regSalud", "relab", "secuencia_p", "sex", "sizeFirm", "wap"),
.funs = factor)
# Eliminamos la variable Var.1 que solo corresponde al numero de filas
db <- db[, 2:ncol(db)]
### --- Filtrado base para mayores de 18 y ocupados
db_filtro <- subset(db, age >= 18 & ocu == 1)
### Variables escogidas: Basados en ecuaci?n de Mincer
# Hogar: directorio
# Relaci?n jefe del hogar: p6050
# Factores de expansi?n: fex_c
# y ingreso: ingtotes (ingreso total imputado), ingtotob (ingreso total observado), ingtot (ingreso total)
# 1. Escolaridad: p6210s1, p6210, maxEducLevel
# 2. Experiencia: p6426
# 3. Edad: age
# 4. Raza: No tenemos
# 5. Sexo: sex
# 6. Estrato: estrato1
# 7. Formal o Informal: formal, informal
# 8. Area rural/urbano: clase
# 9. Ocupaci?n: oficio
# 10.Tama?o de la empresa: sizeFirm
# 11.Segundo trabajo: p7040
Base_var <- db_filtro %>% select(directorio, p6050, fex_c, ingtot, ocu, p6210s1,
p6210, maxEducLevel, p6426, age, sex, estrato1,
formal, informal, clase, oficio, sizeFirm, p7040)
skim(Base_var)
### --- Missing Values
# Sacar cantidad de NAs por variable
cantidad_na <- sapply(Base_var, function(x) sum(is.na(x)))
cantidad_na <- data.frame(cantidad_na)
porcentaje_na <- cantidad_na/nrow(Base_var)
# Porcentaje de observaciones faltantes.
p <- mean(porcentaje_na[,1])
print(paste0("En promedio el ", round(p*100, 2), "% de las entradas est?n vac?as"))
# Ordenamos de mayor a menor
porcentaje_na <- arrange(porcentaje_na, desc(cantidad_na))
# Convertimos el nombre de la fila en columna
porcentaje_na <- rownames_to_column(porcentaje_na, "variable")
### --- Imputar variables---###
#Identificar cuantos ingresos son <=0
ing_0 <- Base_var$ingtot==0
sum(ing_0)
##Crear promedio del ingreso
Base_var = Base_var %>%
group_by(directorio) %>%
mutate(mean_ingtot = mean(ingtot))
#Impute a ingresos totales iguales a 0 el promedio del ingreso del hogar
Base_var = Base_var %>%
mutate(ingtot = ifelse(ingtot==0,
yes = mean_ingtot,
no = ingtot))
#Validar que no queden 0 en ingreso despu?s de imputar
ing_0 <- Base_var$ingtot==0
sum(ing_0)
#Imputar restantes con la media total de la muestra
#Crear media total
mu<- mean(Base_var$ingtot)
#Imputar informaci?n para observaci?n sin miembros de hogar
Base_var = Base_var %>%
mutate(ingtot = ifelse(ingtot==0,
yes = mu,
no = ingtot))
#Nueva validacion
ing_0 <- Base_var$ingtot==0
sum(ing_0)
### --- Limpieza outliers --- ###
x<-Base_var$ingtot
lambda<-boxcox(x, objective.name = "Log-Likelihood", optimize = T)$lambda
#Transformamos la variable
Base_var$ingtot_boxcox<-boxcoxTransform(x, lambda)
hist_ingtot<-ggplot()+
geom_histogram(aes(x = Base_var$ingtot), fill = "darkgreen", alpha = 0.3)
hist_ingtot_boxcox<-ggplot()+
geom_histogram(aes(x = Base_var$ingtot_boxcox), fill = "darkblue", alpha = 0.3)
ggarrange(hist_ingtot, hist_ingtot_boxcox, nrow = 1, ncol = 2)
x<-Base_var$ingtot
lambda<-boxcox(x, objective.name = "Log-Likelihood", optimize = T)$lambda
#Transformamos la variable
Base_var$ingtot_boxcox<-boxcoxTransform(x, lambda)
hist_ingtot<-ggplot()+
geom_histogram(aes(x = Base_var$ingtot), fill = "darkgreen", alpha = 0.3)
hist_ingtot_boxcox<-ggplot()+
geom_histogram(aes(x = Base_var$ingtot_boxcox), fill = "darkblue", alpha = 0.3)
ggarrange(hist_ingtot, hist_ingtot_boxcox, nrow = 1, ncol = 2)
sum(ing_0)
x<-Base_var$ingtot
lambda<-boxcox(x, objective.name = "Log-Likelihood", optimize = T)$lambda
Base_var$ingtot_boxcox<-boxcoxTransform(x, lambda)
hist_ingtot<-ggplot()+
geom_histogram(aes(x = Base_var$ingtot), fill = "darkgreen", alpha = 0.3)
hist_ingtot
hist_ingtot_boxcox<-ggplot()+
geom_histogram(aes(x = Base_var$ingtot_boxcox), fill = "darkblue", alpha = 0.3)
ggarrange(hist_ingtot, hist_ingtot_boxcox, nrow = 1, ncol = 2)
View(Base_var)
stargazer(Base_var[2:20], type = "text")
stargazer(Base_var, type = "text")
class(Base_var$age)
as.data.frame(Base_var)
stargazer(Base_var, type = "text")
class(Base_var)
stargazer(Base_var, type = "text")
Base_var
stargazer(as.data.frame(Base_var), type="text")
stargazer(as.data.frame(Base_var), type="latex")
stargazer(as.data.frame(Base_var), type="latex", flip = TRUE, digits = 1)
stargazer(as.data.frame(Base_var), type="text", flip = TRUE, digits = 1)
stargazer(as.data.frame(Base_var), type="latex", flip = TRUE, digits = 1)
stargazer(as.data.frame(Base_var[c(ingtot, p6426, age)]), type="latex", flip = TRUE, digits = 1)
stargazer(as.data.frame(Base_var), type="latex", flip = TRUE, digits = 1)
stargazer(as.data.frame(Base_var), type="text", flip = TRUE, digits = 1)
stargazer(as.data.frame(Base_var), type="latex", flip = TRUE, digits = 1)
stargazer(graph_base[c(ingtot, age, p6426 )], type="text", flip = TRUE, digits = 1)
graph_base <- as.data.frame(Base_var)
stargazer(graph_base[c(ingtot, age, p6426 )], type="text", flip = TRUE, digits = 1)
stargazer(graph_base[c("ingtot", "age", "p6426" )], type="text", flip = TRUE, digits = 1)
stargazer(graph_base[c("ingtot", "age", "p6426" )], type="latex", flip = TRUE, digits = 1)
stargazer(graph_base[c("ingtot", "age", "p6426" )], type="latex", flip = TRUE, digits = 0)
stargazer(graph_base[c("ingtot", "age", "p6426" )], type="text", flip = TRUE, digits = 0)
stargazer(graph_base[c("ingtot", "age", "p6426" )], type="latex", flip = TRUE, digits = 0)
View(Base_var)
hist(Base_var$ingtot)
# Ingresos vs. estrato y sexo
box_plot <- ggplot(data=Base_var , mapping = aes(as.factor(estrato1) , ingtot)) +
geom_boxplot()
box_plot <- box_plot +
geom_point(aes(colour=as.factor(sex))) +
scale_color_manual(values = c("0"="red" , "1"="blue") ,
label = c("0"="Hombre" , "1"="Mujer") ,
name = "Sexo")
box_plot
box_plot <- box_plot +
geom_point(aes(colour=as.factor(sex))) +
scale_color_manual(values = c("0"="red" , "1"="blue") ,
label = c("0"="Hombre" , "1"="Mujer") ,
name = "Sexo") +
labs(x= "Estrato Socioeconómico" y="Ingresos Totales") +
ggtitle("Gráfico de Cajas y Bigotes - Ingresos vs. Estrato")
box_plot
box_plot <- box_plot +
geom_point(aes(colour=as.factor(sex))) +
scale_color_manual(values = c("0"="red" , "1"="blue") ,
label = c("0"="Hombre" , "1"="Mujer") ,
name = "Sexo") +
labs(x= "Estrato Socioeconómico", y ="Ingresos Totales") +
ggtitle("Gráfico de Cajas y Bigotes - Ingresos vs. Estrato")
box_plot
box_plot <- ggplot(data=Base_var , mapping = aes(as.factor(estrato1) , ingtot)) +
geom_boxplot()
box_plot <- box_plot +
geom_point(aes(colour=as.factor(sex))) +
scale_color_manual(values = c("0"="red" , "1"="blue") ,
label = c("0"="Hombre" , "1"="Mujer") ,
name = "Sexo") +
labs(x= "Estrato Socioeconómico", y ="Ingresos Totales") +
ggtitle("Gráfico de Cajas y Bigotes - Ingresos vs. Estrato por Sexo")
box_plot <- ggplot(data=Base_var , mapping = aes(as.factor(estrato1) , ingtot)) +
geom_boxplot()
box_plot <- box_plot +
geom_point(aes(colour=as.factor(sex))) +
scale_color_manual(values = c("0"="red" , "1"="blue") ,
label = c("0"="Hombre" , "1"="Mujer") ,
name = "Sexo") +
labs(x= "Estrato Socioeconómico", y ="Ingresos Totales")
box_plot
library(sjPlot)
sjt.xtab(Base_var$ingtot, Base_var$sex)
stargazer(x)
stargazer(x, type = "text")
stargazer(graph_base[c("ingtot", "age", "p6426" )], type='text',
digits=0, header=FALSE,
summary.stat=c('mean', 'sd', 'p25', 'p50' ,'median', 'p75', 'p100'))
stargazer(graph_base[c("ingtot", "age", "p6426" )], type='text',
digits=0, header=FALSE,
summary.stat=c('mean', 'sd', 'p25', 'p50' ,'median', 'p75'))
stargazer(graph_base[c("ingtot", "age", "p6426" )], type='text',
digits=0, header=FALSE,
summary.stat=c('mean', 'sd', 'p25' ,'median', 'p75'))
stargazer(graph_base[c("ingtot", "age", "p6426" )], type='latex',
digits=0, header=FALSE,
summary.stat=c('mean', 'sd', 'p25' ,'median', 'p75'))
stargazer(graph_base[c("ingtot", "age", "p6426" )], type="text", flip = TRUE, digits = 0)
stargazer(graph_base[c("ingtot", "age", "p6426" )], type='text',
digits=0, header=FALSE,
summary.stat=c('N', 'mean', 'sd', 'p25' ,'median', 'p75'))
stargazer(graph_base[c("ingtot", "age", "p6426" )], type="latex", flip = TRUE, digits = 0)
stargazer(graph_base[c("ingtot", "age", "p6426" )], type='text',
digits=0, header=FALSE,
summary.stat=c('N', 'mean', 'sd','min', 'p25' ,'median', 'p75', 'max'))
stargazer(graph_base[c("ingtot", "age", "p6426" )], type='latex',
digits=0, header=FALSE,
summary.stat=c('N', 'mean', 'sd','min', 'p25' ,'median', 'p75', 'max'))
stargazer(graph_base[c("ingtot", "age", "p6426" )], type='latex', flip = TRUE,
digits=0, header=FALSE,
summary.stat=c('N', 'mean', 'sd','min', 'p25' ,'median', 'p75', 'max'))
stargazer(graph_base[c("ingtot", "age", "p6426" )], type='text', flip = TRUE,
digits=0, header=FALSE,
summary.stat=c('N', 'mean', 'sd','min', 'p25' ,'median', 'p75', 'max'))
stargazer(graph_base[c("ingtot", "age", "p6426" )], type='latex', flip = TRUE,
digits=0, header=FALSE,
summary.stat=c('N', 'mean', 'sd','min', 'p25' ,'median', 'p75', 'max'))
stargazer(graph_base[c("ingtot", "age", "p6426", "estrato1" )], type='latex', flip = TRUE,
digits=0, header=FALSE,
summary.stat=c('N', 'mean', 'sd','min', 'p25' ,'median', 'p75', 'max'))
stargazer(graph_base[c("ingtot", "age", "p6426", "estrato1" )], type='text', flip = TRUE,
digits=0, header=FALSE,
summary.stat=c('N', 'mean', 'sd','min', 'p25' ,'median', 'p75', 'max'))
box_plot
x <- boxplot(box_plot)
graph2 <- ggplot(data = Base_var ,
mapping = aes(x = age , y = ingtot , group=as.factor(formal)
, color=as.factor(formal))) +
geom_point()
graph2
graph2 <- ggplot(data = Base_var ,
mapping = aes(x = age , y = ingtot , group=as.factor(formal))) +
scale_color_manual(values = c("0"="red" , "1"="blue") ,
label = c("0"="Informal" , "1"="Formal") ,
name = "Formal")
geom_point()
graph2 <- ggplot(data = Base_var ,
mapping = aes(x = age , y = ingtot , group=as.factor(formal))) +
scale_color_manual(values = c("0"="red" , "1"="blue") ,
label = c("0"="Informal" , "1"="Formal") ,
name = "Formal")+
geom_point()
graph2
graph2 <- ggplot(data = Base_var ,
mapping = aes(x = age , y = ingtot , group=as.factor(formal)
, color=as.factor(formal))) +
geom_point()
graph2
graph2 <- ggplot(data = Base_var ,
mapping = aes(x = age , y = ingtot , group=as.factor(formal)
, color=as.factor(formal))) +
labs(x = "Edad", y = "Ingresos totales")
geom_point()
graph2
graph2 <- ggplot(data = Base_var ,
mapping = aes(x = age , y = ingtot , group=as.factor(formal)
, color=as.factor(formal))) +
geom_point() +
labs(x = "Edad", y = "Ingresos totales")
graph2
graph2 <- ggplot(data = Base_var ,
mapping = aes(x = age , y = ingtot , group=as.factor(formal)
, color=as.factor(formal))) +
geom_point() +
labs(x = "Edad", y = "Ingresos Totales")
box_plot_boxcox<- ggplot(data=Base_var , mapping = aes(as.factor(estrato1) , ingtot_boxcox)) +
geom_boxplot()
box_plot_boxcox <- box_plot_boxcox +
geom_point(aes(colour=as.factor(sex))) +
scale_color_manual(values = c("0"="red" , "1"="blue") ,
label = c("0"="Hombre" , "1"="Mujer") ,
name = "Sexo") +
labs(x= "Estrato Socioeconómico", y ="Ingresos Totales (boxcox)")
box_plot_boxcox
graph2 <- ggplot(data = Base_var ,
mapping = aes(x = age , y = ingtot , group=as.factor(formal)
, color=as.factor(formal))) +
geom_point() +
labs(x = "Edad", y = "Ingresos Totales")
graph2
graph2_boxcox<- ggplot(data = Base_var ,
mapping = aes(x = age , y = ingtot_boxcox , group=as.factor(formal)
, color=as.factor(formal), labs("0= Informal", "1= Formal"))) +
geom_point()
graph2_boxcox
graph2 <- ggplot(data = Base_var ,
mapping = aes(x = age , y = ingtot , group=as.factor(formal)
, color=as.factor(formal), labs("0= Informal", "1= Formal")))) +
geom_point() +
labs(x = "Edad", y = "Ingresos Totales")
graph2 <- ggplot(data = Base_var ,
mapping = aes(x = age , y = ingtot , group=as.factor(formal)
, color=as.factor(formal),
labs("0= Informal", "1= Formal"))) +
geom_point() +
labs(x = "Edad", y = "Ingresos Totales")
graph2
graph2 <- ggplot(data = Base_var ,
mapping = aes(x = age , y = ingtot , group=as.factor(formal)
, color=as.factor(formal))) +
geom_point() +
labs(x = "Edad", y = "Ingresos Totales")
graph2
graph2 <- ggplot(data = Base_var ,
mapping = aes(x = age , y = ingtot , group=as.factor(formal))) +
geom_point(aes(colour=as.factor(formal))) +
scale_color_manual(values = c("0"="red" , "1"="blue") ,
label = c("0"="Informal" , "1"="Formal") ,
name = "Formal") +
labs(x = "Edad", y = "Ingresos Totales")
graph2
graph2 <- ggplot(data = Base_var ,
mapping = aes(x = age , y = ingtot , group=as.factor(formal))) +
geom_point(aes(colour=as.factor(formal))) +
scale_color_manual(values = c("0"="lightred" , "1"="green") ,
label = c("0"="Informal" , "1"="Formal") ,
name = "Formal") +
labs(x = "Edad", y = "Ingresos Totales")
graph2
graph2 <- ggplot(data = Base_var ,
mapping = aes(x = age , y = ingtot , group=as.factor(formal))) +
geom_point(aes(colour=as.factor(formal))) +
scale_color_manual(values = c("0"="light_red" , "1"="green") ,
label = c("0"="Informal" , "1"="Formal") ,
name = "Formal") +
labs(x = "Edad", y = "Ingresos Totales")
graph2
graph2 <- ggplot(data = Base_var ,
mapping = aes(x = age , y = ingtot , group=as.factor(formal))) +
geom_point(aes(colour=as.factor(formal))) +
scale_color_manual(values = c("0"="darkseagreen1" , "1"="coral2") ,
label = c("0"="Informal" , "1"="Formal") ,
name = "Formal") +
labs(x = "Edad", y = "Ingresos Totales")
graph2
graph2 <- ggplot(data = Base_var ,
mapping = aes(x = age , y = ingtot , group=as.factor(formal))) +
geom_point(aes(colour=as.factor(formal))) +
scale_color_manual(values = c("0"="aquamarine" , "1"="coral2") ,
label = c("0"="Informal" , "1"="Formal") ,
name = "Formal") +
labs(x = "Edad", y = "Ingresos Totales")
graph2
graph2 <- ggplot(data = Base_var ,
mapping = aes(x = age , y = ingtot , group=as.factor(formal))) +
geom_point(aes(colour=as.factor(formal))) +
scale_color_manual(values = c("0"="cadetblue" , "1"="coral2") ,
label = c("0"="Informal" , "1"="Formal") ,
name = "Formal") +
labs(x = "Edad", y = "Ingresos Totales")
graph2
graph2 <- ggplot(data = Base_var ,
mapping = aes(x = age , y = ingtot , group=as.factor(formal))) +
geom_point(aes(colour=as.factor(formal))) +
scale_color_manual(values = c("0"="cadetblue3" , "1"="coral2") ,
label = c("0"="Informal" , "1"="Formal") ,
name = "Formal") +
labs(x = "Edad", y = "Ingresos Totales")
graph2
graph2 <- ggplot(data = Base_var ,
mapping = aes(x = age , y = ingtot , group=as.factor(formal))) +
geom_point(aes(colour=as.factor(formal))) +
scale_color_manual(values = c("0"="cadetblue3" , "1"="coral") ,
label = c("0"="Informal" , "1"="Formal") ,
name = "Formal") +
labs(x = "Edad", y = "Ingresos Totales")
graph2
graph2_boxcox <- ggplot(data = Base_var ,
mapping = aes(x = age , y = ingtot_boxcox , group=as.factor(formal))) +
geom_point(aes(colour=as.factor(formal))) +
scale_color_manual(values = c("0"="cadetblue3" , "1"="coral") ,
label = c("0"="Informal" , "1"="Formal") ,
name = "Formal") +
labs(x = "Edad", y = "Ingresos Totales")
graph2_boxcox
graph2_boxcox <- ggplot(data = Base_var ,
mapping = aes(x = age , y = ingtot_boxcox , group=as.factor(formal))) +
geom_point(aes(colour=as.factor(formal))) +
scale_color_manual(values = c("0"="cadetblue3" , "1"="coral") ,
label = c("0"="Informal" , "1"="Formal") ,
name = "Formal") +
labs(x = "Edad", y = "Ingresos Totales")
graph2_boxcox
library(jtools)
##  OLS Age-earnings model - sin transformaciÃ³n
Base_var$age_2 <- (Base_var$age)^2
model_income<-lm(ingtot~age + age_2,
data= Base_var)
summ(model_income)
##  OLS Age-earnings model - Con trasformaciÃ³n boxcox
model_income_boxcox<-lm(ingtot_boxcox~age + age_2,
data= Base_var)
summ(model_income_boxcox)
#Comparar modelos
stargazer(model_income, model_income_boxcox, type = "text")
stargazer(model_income, model_income_boxcox, type = "latex")
